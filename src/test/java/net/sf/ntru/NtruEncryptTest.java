/**
 * This software is dual-licensed. You may choose either the
 * Non-Profit Open Software License version 3.0, or any license
 * agreement into which you enter with Security Innovation, Inc.
 * 
 * Use of this code, or certain portions thereof, implements
 * inventions covered by claims of one or more of the following
 * U.S. Patents and/or foreign counterpart patents, owned by
 * Security Innovation, Inc.:
 * 7,308,097, 7,031,468, 6,959,085, 6,298,137, and 6,081,597.
 * Practice or sale of the inventions embodied in the code hereof
 * requires a license from Security Innovation Inc. at:
 * 
 * 187 Ballardvale St, Suite A195
 * Wilmington, MA 01887
 * USA
 */

package net.sf.ntru;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.fail;

import org.junit.Test;

public class NtruEncryptTest {
    
    @Test
    public void testEncryptDecrypt() {
        for (EncryptionParameters params: new EncryptionParameters[] {EncryptionParameters.APR2011_743, EncryptionParameters.APR2011_743_FAST}) {
            NtruEncrypt ntru = new NtruEncrypt(params);
            EncryptionKeyPair kp = ntru.generateKeyPair();
            
            testPolynomial(ntru, kp, params);
            
            testText(ntru, kp, params);
            // sparse/dense
            params.sparse = !params.sparse;
            testText(ntru, kp, params);
            params.sparse = !params.sparse;
            
            testEmpty(ntru, kp, params);
            testMaxLength(ntru, kp, params);
            testTooLong(ntru, kp, params);
        }
    }
    
    // encrypts and decrypts a polynomial
    private void testPolynomial(NtruEncrypt ntru, EncryptionKeyPair kp, EncryptionParameters params) {
        IntegerPolynomial m = DenseTernaryPolynomial.generateRandom(params.N);
        SparseTernaryPolynomial r = SparseTernaryPolynomial.generateRandom(params.N, params.dr, params.dr);
        IntegerPolynomial e = ntru.encrypt(m, r, kp.pub.h);
        IntegerPolynomial c = ntru.decrypt(e, kp.priv.t, kp.priv.fp);
        assertArrayEquals(m.coeffs, c.coeffs);
        
    }
    
    // encrypts and decrypts text
    private void testText(NtruEncrypt ntru, EncryptionKeyPair kp, EncryptionParameters params) {
        byte[] plainText = "text to encrypt".getBytes();
        byte[] encrypted = ntru.encrypt(plainText, kp.pub);
        byte[] decrypted = ntru.decrypt(encrypted, kp);
        assertArrayEquals(plainText, decrypted);
    }
    
    // tests an empty message
    private void testEmpty(NtruEncrypt ntru, EncryptionKeyPair kp, EncryptionParameters params) {
        byte[] plainText = "".getBytes();
        byte[] encrypted = ntru.encrypt(plainText, kp.pub);
        byte[] decrypted = ntru.decrypt(encrypted, kp);
        assertArrayEquals(plainText, decrypted);
    }
    
    // tests a message of the maximum allowed length
    private void testMaxLength(NtruEncrypt ntru, EncryptionKeyPair kp, EncryptionParameters params) {
        byte[] plainText = new byte[params.maxMsgLenBytes];
        System.arraycopy("secret encrypted text".getBytes(), 0, plainText, 0, 21);
        byte[] encrypted = ntru.encrypt(plainText, kp.pub);
        byte[] decrypted = ntru.decrypt(encrypted, kp);
        assertArrayEquals(plainText, decrypted);
    }
    
    // tests a message that is too long
    private void testTooLong(NtruEncrypt ntru, EncryptionKeyPair kp, EncryptionParameters params) {
        try {
            byte[] plainText = new byte[params.maxMsgLenBytes+1];
            System.arraycopy("secret encrypted text".getBytes(), 0, plainText, 0, 21);
            byte[] encrypted = ntru.encrypt(plainText, kp.pub);
            byte[] decrypted = ntru.decrypt(encrypted, kp);
            assertArrayEquals(plainText, decrypted);
            fail("An exception should have been thrown!");
        }
        catch (NtruException ex) {
        }
    }
    
    // encrypts and decrypts text using an encoded key pair (fastFp=false)
    @Test
    public void testEncodedKeysSlowFp() {
        byte[] plainText = "secret encrypted text".getBytes();
        
        // sparse polynomials
        EncryptionParameters params = EncryptionParameters.APR2011_743;
        NtruEncrypt ntru = new NtruEncrypt(params);
        EncryptionPrivateKey priv = new EncryptionPrivateKey(new byte[] {2, -94, 95, 65, -107, 27, 98, 62, -15, -62, 21, -4, 119, -117, 7, 68, 100, 113, -36, -82, 87, -87, -82, 24, -45, -75, -74, -108, 105, 24, 123, 117, 124, 74, -27, 42, -106, -78, 114, 27, 18, 77, -41, 105, -113, 39, 49, 46, 109, -69, 61, 77, 49, 117, 14, -29, 42, 3, 120, -121, -120, -37, 95, 84, 60, -9, -31, -64, 31, 72, 115, -15, 21, -6, 27, -60, -73, -29, -33, -81, -43, 106, 65, 114, 102, -14, -115, -96, 9, 54, 23, -18, -24, -76, 84, -41, -79, 35, 88, 11, 41, 67, 44, -63, -28, 76, 84, -41, -103, 106, -22, 35, -2, -40, -48, -121, -128, 76, 63, 123, -11, 103, -35, -32, 21, -51, -99, -40, -103, -12, 64, -80, 57, -56, 1, -51, 103, 83, 50, 111, -87, -98, 7, -109, 25, -51, 23, -92}, params);
        EncryptionPublicKey pub = new EncryptionPublicKey(new byte[] {91, -66, -25, -81, -66, -33, 25, -31, 48, 23, -38, 20, -30, -120, -17, 1, 21, 51, -11, 102, -50, 62, 71, 79, 32, -49, -57, 105, 21, -34, -45, -67, 113, -46, -103, 57, 28, -54, -21, 94, -112, -63, 105, -100, -95, 21, -52, 50, 11, -22, -63, -35, -42, 50, 93, -40, 23, 0, 121, 23, -93, 111, -98, -14, 92, -24, -117, -8, -109, -118, -4, -107, -60, 100, -128, -47, -92, -117, -108, 39, -113, 43, 48, 68, 95, 123, -112, 41, -27, -99, 59, 33, -57, -120, -44, 72, -98, -105, -91, -52, -89, 107, 119, 87, -36, -102, -83, 67, -8, 30, -54, 74, 93, 119, -3, 126, 69, -104, -44, -24, 124, 108, -125, 73, 98, 121, -49, -37, -24, 87, -71, 91, 8, -31, -50, 95, 112, 27, 97, -93, 3, -73, -54, -16, -92, -108, -74, 88, -5, 23, 70, 69, -49, -46, -50, 65, 69, -54, -41, 109, 8, -80, -23, -84, 120, -77, 26, 99, -104, -33, 82, 91, 22, -17, 113, -29, 66, -7, -114, -101, -111, -47, -1, -3, -57, 62, 79, -70, -58, 45, 76, 28, -117, 59, -117, 113, 84, -55, 48, 119, 58, -105, -20, 80, 102, 14, -69, -69, 5, 11, -87, 107, 15, 105, -69, -27, -24, 47, -18, -54, -45, -67, 27, -52, -20, -94, 64, -26, -58, 98, 33, -61, 71, -101, 120, 28, 113, 72, 127, 50, 123, 36, -97, 78, 32, -74, 105, 62, 92, 84, -17, 21, -75, 24, -90, -78, -4, -121, 47, -82, 119, 27, -61, 17, -66, 43, 96, -49, -6, 66, -13, -75, -95, 64, -12, -39, 111, 46, -3, -123, 82, 12, -26, -30, -29, 71, -108, -79, -112, 13, 16, -70, 7, 100, 84, 89, -100, 114, 47, 56, 71, 83, 63, -61, -39, -53, -100, 23, -31, -52, -46, 36, -13, 62, 107, 28, -28, 92, 116, -59, 28, -111, -23, -44, 21, -2, 127, -112, 54, -126, 13, -104, 47, -43, -109, -19, 107, -94, -126, 50, 92, -69, 1, 115, -121, -52, -100, 25, 126, -7, 86, 77, 72, -2, -104, -42, 98, -16, 54, -67, 117, 14, -73, 4, 58, 121, 35, 1, 99, -127, -9, -60, 32, -37, -106, 6, -108, -13, -62, 23, -20, -9, 21, 15, 4, 126, -112, 123, 34, -67, -51, 43, -30, -75, 119, -112, -58, -55, -90, 2, -5, -46, -12, 119, 87, 24, -52, 2, -29, 113, 61, -82, -101, 57, -11, -107, -11, 67, -42, -43, -13, 112, -49, 82, 60, 13, -50, 108, 64, -64, 53, -107, -9, 102, -33, 75, -100, -115, 102, -113, -48, 19, -119, -72, -65, 22, -65, -93, 34, -71, 75, 101, 54, 126, 75, 34, -21, -53, -36, 127, -21, 70, 24, 89, -88, 63, -43, -4, 68, 97, -45, -101, -125, -38, 98, -118, -34, -63, 23, 78, 15, 17, 101, -107, 119, -41, 107, 117, 17, 108, 43, -93, -6, -23, -30, 49, -61, 27, 61, -125, -68, 51, 40, -106, -61, 51, 127, 2, 123, 7, -50, -115, -32, -95, -96, 67, 4, 5, 59, -45, 61, 95, 14, 2, -76, -121, 8, 125, 16, -126, 58, 118, -32, 19, -113, -113, 120, -101, 86, 76, -90, 50, -92, 51, -92, 1, 121, -74, -101, -33, 53, -53, -83, 46, 20, -87, -112, -61, -87, 106, -126, 64, 99, -60, 70, 120, 47, -53, 36, 20, -90, 110, 61, -93, 55, -10, 85, 45, 52, 79, 87, 100, -81, -85, 34, 55, -91, 27, 116, -18, -71, -11, 87, -11, 76, 48, 97, -78, 64, -100, -59, -12, 19, -90, 121, 48, -19, 64, 113, -70, -14, -70, 92, 124, 42, 95, 7, -115, 36, 127, 73, 33, 30, 121, 88, 16, -90, 99, 120, -68, 64, -125, -78, 76, 112, 68, 8, 105, 10, -47, -124, 39, -107, -101, 46, -61, 118, -74, 102, -62, -6, -128, 17, -45, 61, 76, 63, -10, -41, 50, -113, 75, -83, -59, -51, -23, -61, 47, 7, -80, 126, -2, 79, -53, 110, -93, -38, -91, -22, 20, -84, -113, -124, -73, 124, 0, 33, -58, 63, -26, 52, 7, 74, 65, 38, -33, 21, -9, -1, 120, -16, 47, -96, 59, -64, 74, 6, 48, -67, -32, -26, 35, 68, 47, 82, 36, 52, 41, 112, -28, -22, -51, -6, -49, 105, 16, -34, 99, -41, 75, 7, 79, -22, -125, -30, -126, 35, 119, -43, -30, 32, 8, 44, -42, -98, 78, -92, -95, -10, -94, -1, -91, -122, 77, 0, 40, -23, 36, 85, 123, -57, -74, -69, -90, 89, 111, -120, 22, 5, -48, 114, 59, 31, 31, -25, -3, 24, 110, -110, 73, -40, 92, -26, -12, 52, 83, -98, -119, -6, -117, -89, 95, 83, -25, 122, -26, 114, 81, 25, 110, 79, -49, -39, 10, -78, -65, 57, -90, -46, -126, 15, -124, -104, -89, -66, -87, 24, -45, 39, -34, -40, -13, 106, 12, -25, -116, -47, 79, -81, 64, -17, -31, -70, 87, 36, 46, 102, 107, 48, 88, 34, 46, 24, 63, -100, 106, 27, 58, -71, 38, 60, -66, 45, -89, 39, -60, -116, -14, -119, 118, 0, -24, -9, 38, -71, -79, 124, -119, -64, -9, 71, -56, -82, -73, -69, 127, -1, -20, 123, 32, -43, 49, 5, 49, 105, -5, -2, 5, -105, -111, 89, -30, -41, -49, 61, 80, 69, 44, -33, -116, -45, -96, 63, 28, -17, -106, -94, 90, -40, -88, 122, 116, 116, 113, -65, 104, 119, -3, 96, -45, 18, -120, -111, 83, 43, -5, 101, 71, 48, 104, -112, -95, -46, 53, -96, -93, -126, 96, 56, 104, -111, 114, -1, -44, -120, -112, -19, 100, 41, -122, 23, -78, 33, -35, 11, 57, -18, 106, -40, 74, 61, 66, 54, -77, 96, 70, 108, -128, 91, -97, -36, -23, -86, -91, 44, 58, 117, 2, 26, 44, 95, 79, -101, -81, -92, 110, -81, -12, -88, -21, -83, 60, 93, -121, -114, -48, -34, -119, -1, 127, -121, 54, -128, -106, -39, -108, 81, 17, -3, -13, -57, 74, 41, -122, -65, -107, -118, -65, -61, 103, -69, 19}, params);
        EncryptionKeyPair kp = new EncryptionKeyPair(priv, pub);
        byte[] encrypted = ntru.encrypt(plainText, kp.pub);
        byte[] decrypted = ntru.decrypt(encrypted, kp);
        assertArrayEquals(plainText, decrypted);
        
        // dense polynomials
        params = EncryptionParameters.EES1499EP1;
        ntru = new NtruEncrypt(params);
        priv = new EncryptionPrivateKey(new byte[] {116, 7, 118, 121, 6, 77, -36, 60, 65, 108, 10, -106, 12, 9, -22, -113, 122, -31, -31, 18, 120, 81, -33, 5, 122, -76, 109, -30, -101, -45, 21, 13, -11, -49, -111, 46, 91, 4, -28, -109, 121, -119, -121, -58, -113, -9, -10, -25, -53, 40, -86, -22, -50, 42, 52, 107, 119, 17, 33, 125, -26, 33, 55, 25, -77, -65, -106, 116, -67, 91, 105, -7, 42, -107, -54, 101, 12, -12, 57, -116, 45, -107, -17, 110, 35, -64, 19, -38, -122, 115, -93, 53, 69, 66, -106, 17, 20, -71, 121, 23, -21, -45, 108, 97, 23, -98, -12, -41, -31, -53, 30, -42, 15, 85, -21, -89, 118, 42, -117, -39, 69, 0, -63, 83, 48, -80, -14, -123, -4, -116, -90, -107, -89, 119, 29, -30, 69, 22, -84, 47, 117, -123, 102, -116, 35, 93, -13, 84, -9, -122, 58, 101, 93, -106, -119, -35, -75, 76, 27, -125, -22, 68, 101, 49, 103, -13, -98, 93, -56, -110, -19, -12, 74, 104, 7, 6, -11, 47, 57, 90, 75, -30, 47, 66, -58, 14, 14, 70, 11, -119, -36, -118, -55, -53, 101, -73, -77, 33, -29, 96, -86, 38, 47, 103, 19, -37, -17, -50, -82, -87, -119, 37, -54, 77, -69, -16, -48, -52, 110, -26, 111, 35, 26, -53, -10, 9, -108, -34, 102, 7, -18, -72, -26, 24, -50, -43, 92, 56, -94, 23, -36, 60, 28, -121, 27, 127, -93, -79, -45, -60, 105, -6, -88, 72, -41, 47, -51, 3, 91, 116, 75, 122, -94, -113, 28, -96, -62, -29, -74, -85, -93, 51, 58, 72, 44, 9, 18, -48, -24, 73, 122, 60, -23, 83, -110, -7, -111, -69, 106, 51, 118, -83, -18, 109, -32, 40, 22}, params);
        pub = new EncryptionPublicKey(new byte[] {}, params);
        kp = new EncryptionKeyPair(priv, pub);
        encrypted = ntru.encrypt(plainText, kp.pub);
        decrypted = ntru.decrypt(encrypted, kp);
        assertArrayEquals(plainText, decrypted);
    }
    
    // encrypts and decrypts text using an encoded key pair (fastFp=true)
    @Test
    public void testEncodedKeysFastFp() {
        byte[] plainText = "secret encrypted text".getBytes();
        
        // sparse polynomials
        EncryptionParameters params = EncryptionParameters.APR2011_743;
        NtruEncrypt ntru = new NtruEncrypt(params);
        EncryptionPrivateKey priv = new EncryptionPrivateKey(new byte[] {0, 31, 67, 21, 60, -90, 100, -85, 65, -49, 51, 70, -85, -3, 0, 73, -57, 88, -66, -82, 62, 93, -83, 37, 8, -12, 27, -122, 80, 12, 85, -76, -94, 41, 66, -62, 97, -86, -97, 37, -8, 41, 10, 120, -1, 120, 87, 107, -107, -89, -98, -65, -91, 13, 57, 65, -118, -56, 85, 82, 110, 99, 2, 114, -111, -35, 57, 125, 25, 103, 11, 96, 81, 70, -50, -71, 8, 122, -90, 73, 102, -59, 17, 73, 70, -33, -28, -16, -70, -30, -13, 88, 58, -120, -88, -26, -39, 24, 102, 97, 14, -14, -123, -117, -51, 79, 62, 78, -109, 5, 96, 71, -99, 124, 10, 68, 77, 112, 65, -30, -16, -100, -45, 15, 76, 105, -128, -18, -10, -122, 75, 59, -109, 24, -107, -62, -113, 66, 64, -117, 5, 123, 27, -120, -95, -94, -81, -66}, params);
        EncryptionPublicKey pub = new EncryptionPublicKey(new byte[] {4, -67, 45, -3, -68, 57, -83, -54, 9, 82, 127, 36, -32, -72, 112, 72, -125, -48, -86, 19, 59, 31, 29, -81, -14, 105, -13, -54, 72, -17, 105, 16, -90, 58, 114, 89, -125, 79, 8, -85, -20, -43, -86, -107, 42, 119, 53, -9, 46, 50, -128, 26, 109, 71, 83, 77, 83, 1, 1, 60, 44, 118, 100, -4, 54, 122, -99, 124, 96, -91, 75, -15, -50, -61, -17, 53, 10, -56, 100, -116, -115, -84, 69, -120, 7, -34, -28, 93, -44, 111, -68, 36, 65, 14, 86, 45, -103, 92, 0, 123, 77, 53, 20, 36, -16, -96, 89, 109, 37, -107, -81, 5, -119, -11, 75, -110, -84, -83, 63, -79, 114, 17, -91, -97, -100, -69, -1, -103, -112, -5, 94, -81, 93, 6, 116, -93, 123, -23, -126, 63, 87, -102, 37, 39, 17, 59, 22, -41, -118, -40, -100, 22, 112, 54, 62, 76, 72, 21, 11, -30, -29, -88, 70, -64, 34, 51, 70, 32, -28, -93, -56, 7, -119, 112, -43, 41, 22, 88, 121, 65, 18, 114, -49, 112, 94, -55, 44, 16, -6, -64, -12, 123, 106, 124, -108, 24, -115, 32, -47, 16, -2, 32, 125, -100, 58, 95, 47, 8, 22, 14, 101, -87, 24, -46, -58, 79, -53, -88, 5, 42, 4, 5, -32, 96, -30, 35, 82, 56, 112, -60, -81, -4, 35, -124, -72, 18, 24, -25, -38, -68, 97, -69, 46, 45, -105, -19, 36, -92, -31, -74, -116, -10, 45, 63, -41, 75, -85, -9, -103, -64, 71, -47, 126, 94, 53, 70, -52, 74, -108, 120, -72, -15, 31, -118, -109, -105, 41, -126, 55, 93, 32, -122, -71, -18, -116, 111, 73, 56, -123, -6, 5, 7, 4, 61, 79, -97, 24, -41, -111, 29, -121, -120, -2, -63, -38, -8, -7, 41, -19, 122, -18, -115, 40, -24, 10, -23, -57, -12, 70, 112, 74, 19, -36, -127, -9, 27, -73, -62, 80, -98, 87, 70, -112, 89, 19, 22, 50, 123, 35, -116, 74, 41, 98, 84, 23, 31, -105, 119, -58, -92, -33, -93, 14, 37, 80, -76, -119, -35, 102, 88, -5, -86, -86, -67, 11, -46, 39, 73, -62, 3, 87, 42, -66, 51, 113, 21, 72, 67, 56, -92, -86, 123, -107, 42, 1, 60, -24, 8, -39, -115, 83, -20, -15, 18, 42, -40, 102, 101, -112, 73, 9, -25, -56, 52, -119, 63, 50, 112, -32, -123, 77, -106, -24, 51, -32, 5, 125, -62, -32, 42, 113, 68, -59, 1, 64, 62, -20, -73, -82, -44, 66, 15, 67, -95, 23, -62, -76, -14, 70, 71, 75, -33, -98, -8, 28, 40, -3, -128, 38, -23, 120, -114, 91, -27, -74, -106, 23, -21, 77, 51, -22, 31, 36, -69, 82, -47, 126, 86, -113, 56, -4, -41, 0, -110, -92, -56, -68, 65, -103, -8, -9, -113, -15, 95, 30, 4, -26, 112, 107, -94, 81, -97, -103, -8, -9, -102, 8, -92, -85, -92, -4, -65, -88, 66, -1, -23, -92, -82, 48, 27, 74, 5, 30, -77, 124, 30, 123, 51, 39, 7, -17, 62, -80, 13, 20, -50, 0, 110, -121, -41, 65, -57, 31, -127, -53, 43, 125, -51, -106, -32, -112, 39, -42, 11, 122, -83, -46, 35, 52, -35, -12, -83, 84, 117, 120, 2, 15, -28, 49, -39, 8, -57, -59, -89, 34, 23, -118, 106, -102, 100, 67, 119, 5, 122, -92, 55, 87, -17, 84, -10, 68, 21, 48, -12, 41, 91, 33, -61, -6, -29, 84, 0, 95, 36, 72, -89, 63, -67, 99, -35, 109, 11, 113, 123, 114, -4, 93, -90, 11, -30, 105, 52, 92, -60, -109, 11, -49, 74, -58, -57, -66, 23, 11, 89, -106, 24, 113, 60, 95, 46, 77, 27, -99, -112, -48, -73, 100, -116, -39, -105, -80, 116, -63, -14, -85, -47, -114, -55, 19, 55, -4, 90, -40, 95, 43, -101, 37, -98, 49, 123, -101, -89, -64, 32, 73, 71, -10, -23, 43, 50, 127, 24, 28, -3, 112, -121, -103, 71, -38, -7, 101, 119, -102, -80, -128, 53, -77, -84, 3, 70, 106, -80, 53, 40, -68, 73, -120, -69, 69, 13, 10, 101, 59, 83, 25, -27, -26, -85, 13, -90, 63, 12, -88, 23, -22, 41, 68, -55, -79, -58, 16, -114, 103, 14, -32, 62, -9, 8, 116, 22, -49, -112, -43, 117, -10, -34, -126, -38, -90, 127, 124, 62, 34, 96, -37, -25, 115, 82, 45, 86, 103, 80, 50, -19, 17, 2, -115, -27, 100, 94, -119, 55, -43, 95, 83, -52, -11, -90, -100, -108, 5, 75, -54, -86, 65, -81, -59, -19, 69, -16, 83, -56, 28, -91, -38, 49, 46, 85, 117, -87, -108, -38, -101, 13, 0, -56, 124, 19, 118, 6, 123, -73, 74, -35, -111, -36, 18, 90, -30, -24, -126, 48, -83, -82, 9, 2, -60, -59, -96, 94, 19, -101, 83, 14, 87, -114, 109, 34, -81, -8, -100, -98, 82, -91, -100, 49, -33, -15, -39, -67, -112, 116, -100, -88, 77, 74, -12, 19, 70, -60, 84, -78, 44, -77, -127, 33, 126, -85, -81, -122, -15, 68, -20, -85, 16, -2, -120, 19, -82, 105, 125, -112, 24, 56, 36, -32, -71, 63, 113, -53, 101, 60, 43, -88, 111, -99, -5, -33, 20, -113, 57, -54, -62, -92, 27, -49, 63, 108, -51, -126, -110, 31, -9, 117, -39, -24, -110, -89, -2, -62, -53, 87, 111, -83, -47, 74, 116, 18, 84, 127, 86, -6, -121, -104, 108, 54, -14, -45, -24, -122, -67, -63, -37, 126, 41, -78, 108, -69, -72, -18, -100, 8, -36, -15, 108, -101, -10, 59, -28, 94, -103, -21, 91, 126, 107, 123, 32, 112, 94, 107, 125, 8, -40, 117, 6, -81, -91, 66, -15, -122, -60, -64, 57, -41, 61, -89, 109, 37, 124, -89, -6, -119, -26, 67, 53, 111, -95, 121, -96, -40, -98, 109, 61, -61, 74, 34, 100, -28, -7, 111, 80, -2, 22, -115, -95, -93, -127, 67, -45, -50, 50, -28, 86, 79, 37, -15, 32, -11, 52, -17, -55, 25}, params);
        EncryptionKeyPair kp = new EncryptionKeyPair(priv, pub);
        byte[] encrypted = ntru.encrypt(plainText, kp.pub);
        byte[] decrypted = ntru.decrypt(encrypted, kp);
        assertArrayEquals(plainText, decrypted);
        
        // dense polynomials
        params = EncryptionParameters.EES1499EP1;
        ntru = new NtruEncrypt(params);
        kp = ntru.generateKeyPair();
        priv = new EncryptionPrivateKey(new byte[] {115, 0, -24, 101, -113, -111, 106, -66, -72, 11, -76, -25, -82, -104, 114, -121, -92, -28, 1, -80, 104, 70, -63, -30, 27, 127, 106, 61, -55, 27, 64, -66, 59, -84, 40, -68, -123, -12, 106, 33, -8, -62, 93, 1, -68, -14, 74, -61, 48, 121, 121, -70, -17, 66, -113, 104, -33, -5, -123, -28, -73, 28, -80, -66, 81, 113, -12, -36, 85, -6, -108, -23, 44, -78, -61, 89, 51, 17, 23, 115, 70, -71, 70, 25, 68, -1, 124, 6, -27, -128, 104, -24, 48, -16, 38, -99, -106, 27, 109, -15, -33, -84, -107, 114, 0, 93, 87, 36, -24, 91, -75, 127, -101, 113, 94, 102, 1, 38, 115, 73, -98, -29, -42, -1, 53, -88, 54, 56, 69, -89, 32, -7, -45, 50, -43, 107, -3, -21, -53, 89, -50, -105, 56, 117, -51, 9, -106, -87, -90, 21, 33, 107, -50, 116, 76, -128, 99, -96, 46, 114, 32, -117, -22, -67, -27, -11, -105, -10, -20, -124, -67, -100, -6, 103, -73, -109, 126, 77, -92, 108, -119, 38, -46, 86, -51, -11, 32, -65, 56, 1, 94, -90, 101, -117, -28, 124, -45, 78, 9, -111, 39, 12, 116, 7, -124, 84, -83, -38, -11, -1, -5, 78, 113, 106, 68, -1, -75, 113, -27, 73, -57, -14, 21, 123, 10, 2, -124, 6, 119, -38, 74, -108, 115, -89, 119, -29, 103, 93, -73, 76, -122, 89, 110, 76, 116, -16, -1, -119, 91, -107, 62, -94, -59, 30, -31, -124, -127, -128, -76, -106, -53, -98, 52, -109, -9, -5, -2, -45, 74, -88, -76, -107, 98, -103, 57, 91, -7, -100, -59, -124, 59, -122, -104, 121, 98, -44, 62, 30, -101, 33, 97, 11, -97, -101, -32, -51, -72}, params);
        pub = new EncryptionPublicKey(new byte[] {121, 13, 12, 55, 48, -92, 3, -125, 94, -55, -116, -64, -103, -8, 65, -52, -103, 29, -27, 52, 4, -109, -118, 6, -17, -122, 98, -54, 45, 15, 24, -43, -3, 53, 76, 39, -68, 67, -80, 35, -13, -5, 107, 98, 31, 68, 32, -103, -25, -120, -87, 87, 0, 11, -91, 62, -59, -32, -23, 26, -17, -31, 79, 71, 48, 109, -128, -82, -20, 51, 13, 6, 50, -105, 32, -35, -56, -1, 12, 25, 121, 50, 101, -108, -7, -118, -32, 65, -121, -117, -123, -43, 110, 8, -103, -49, 71, 41, -117, -88, 54, 15, 39, 87, 54, -102, -23, 13, -73, 16, -94, -24, -15, -51, 78, -28, 71, -59, 14, -34, 83, 20, -34, 75, 60, 50, 70, 15, 89, 37, 71, -76, -55, 99, 68, -22, 44, -63, -96, -89, -87, -62, 17, -49, 100, -33, 19, 21, 28, -48, -28, -42, 10, -63, -105, 9, 112, 10, -41, 120, -96, 116, 36, -120, -24, 106, -106, -60, -58, 87, 29, 1, 49, 102, -59, -116, -11, 88, 40, 12, -55, 33, -85, 127, -17, -114, 43, -6, -2, 103, 99, 111, 3, -24, 108, 29, -72, -90, 27, -67, -76, -50, 124, -53, 98, -36, -47, 49, 58, -55, 1, -25, -53, -15, -126, 125, -91, -127, 118, 2, 106, 56, 47, -76, 66, 37, -6, 60, -29, 3, 101, -108, -15, -105, 94, -67, -10, -120, -127, -124, -13, 15, -15, 84, 65, -20, 5, 2, 10, -36, 45, 122, 41, 127, 84, -77, -36, -32, 119, -62, 87, 12, -103, -45, 46, 94, -45, -23, 122, 77, 94, -108, -15, 114, 125, -40, 99, -34, -117, 62, -111, 65, -106, 97, -41, -27, 10, -11, 2, 108, -3, -92, 42, -33, -18, -14, 75, 44, 44, 98, -68, 108, -51, -2, -82, 118, 76, 24, 25, -97, -47, 110, 113, -107, 31, -38, -53, -22, -72, 121, -38, -18, 5, 105, -10, -123, 28, -44, 21, 38, -71, -121, -101, 120, -28, -121, 83, 75, -38, 109, -15, -88, 78, -77, -14, -94, -76, 69, -41, 24, 77, 3, 69, 94, 111, 86, 22, 15, 89, 55, -73, -108, -90, -113, 109, -5, -75, -44, -78, 125, 52, 117, 70, -11, 45, -83, -70, 125, -5, -43, -60, 62, 91, 65, -12, -38, 115, -22, -15, -45, 74, -97, -126, 83, 83, -81, 77, -20, 14, -17, -56, -17, -52, 110, 9, -59, -4, -36, 70, -40, 47, 65, -90, -123, -111, 97, -18, -49, -3, 17, 94, -31, 18, -120, -100, 15, 57, 56, -13, -84, 90, 14, 57, -6, -98, 2, -7, 40, 5, 71, -116, 101, -49, -53, -74, 98, -83, -96, -26, 112, -54, -37, 35, -50, 15, 64, -100, -77, -23, -16, 97, 0, 93, 57, 73, 108, -29, -56, -112, 104, 108, 120, -35, -5, 112, 70, 116, 81, 26, -68, -5, 44, 33, -64, 48, 80, -126, -3, 38, 108, 36, 13, -89, 40, 53, 95, 1, 37, 125, -8, 33, 11, 74, -85, 78, -36, 19, -22, -32, -79, -61, 9, -70, 32, 88, 22, -16, -13, 50, 110, -38, -108, -99, -60, 71, -9, -108, -73, -40, -4, -74, 122, 36, -51, 7, -104, 107, 122, -27, -124, 17, -13, 60, 106, -77, 121, 49, 120, 71, -91, -78, -17, -33, -19, 75, -49, 77, 21, -22, 29, 50, 6, -128, 105, 94, -79, -58, 32, 72, -121, -23, 66, -19, -54, -91, -72, 98, 94, 5, 117, -28, -34, -51, -106, 54, -98, 109, -66, 34, -111, -69, -109, 0, -1, 78, 83, 98, 11, 4, 3, 59, 50, -1, 23, -62, -28, -96, -38, 71, -71, -57, -45, -21, 3, 72, -123, 75, -93, -14, -63, -5, -5, 4, 124, 13, -26, -101, 98, 119, 77, 118, 125, 4, -5, 115, 40, 44, -120, -119, -21, -57, -20, -80, 108, 12, 39, 76, -18, 76, -77, -7, -36, -69, -5, 37, 122, -77, -33, 57, -76, -17, -9, -43, 60, -95, 93, -73, 33, -125, -75, 79, -81, 121, -83, 107, -47, -92, 84, -3, -71, 50, 61, -2, -21, 110, 75, -16, -10, 77, -56, 96, 97, -37, -10, -27, 110, 63, 11, -54, 15, 5, 49, -68, 111, 122, 83, 45, -69, 103, 111, -24, -4, -82, -36, 16, 22, 73, 37, 81, -49, -33, -7, 91, -23, -62, 41, -82, 116, 105, -48, 46, -6, -28, 38, 7, -27, 121, -32, -4, -42, -48, 34, -86, -103, -57, -14, 62, 84, -98, -19, -100, 44, -79, -45, 13, -90, 118, 4, -27, 65, -98, 47, -86, 18, 101, 91, -33, 45, -59, 27, -75, -48, -126, 33, -8, -15, 125, -109, 122, -38, 55, 112, 83, -38, 77, 32, -99, 115, 82, -97, 111, 66, -112, 38, -75, 55, -76, -74, 24, -17, -55, -16, 87, -112, -38, 34, -45, -29, -35, 32, -89, -86, 101, 13, -67, 35, 40, 10, -35, 123, -24, 32, -49, -97, 95, -79, -80, -6, -115, -47, -69, -122, 83, 64, 5, 127, 115, -124, -57, 15, 124, 99, 76, 105, -65, 47, 109, -2, -49, -88, -63, -128, 40, -101, 113, 57, -61, -27, 26, -44, 16, 88, 88, 48, 61, -35, 106, 48, -68, -94, 100, -95, 4, -73, -105, -62, 31, 120, 42, -75, 85, 80, -122, -103, -109, 24, 72, 122, 13, 43, 114, -57, -81, -75, 13, 58, 49, -16, -117, -52, 49, -56, -97, 109, -104, 64, -7, -58, -27, -56, 120, 79, 21, -87, 87, -59, 43, 18, 78, 46, -14, 12, -100, -34, 94, -127, 120, 66, 80, 78, 110, 52, -44, 71, 96, -120, 100, 120, -102, -70, -68, 3, -51, 79, 90, 102, -113, 1, 27, -29, 118, -25, -58, -7, 88, 25, 91, -33, -34, 97, -100, -3, -30, 34, -47, 68, -71, 116, 17, -103, 66, 90, 99, -35, 116, 122, 47, -122, -103, -68, 48, 36, 40, -57, -3, -104, -16, 120, 50, 18, -83, -76, 110, -76, -64, 119, -38, -59, -126, 61, -10, 102, -97, -83, -74, -93, -124, -114, 92, -105, -68, 59, -79, -82, 94, -99, 17, -54, -34, -87, 30, -63, -30, 66, -59, -30, 83, 91, -95, 2, -28, 76, -115, -124, 29, -93, 2, -44, 45, -77, 1, -100, 105, -43, -82, -43, 79, 118, 118, -109, 119, 65, 93, 116, 26, -123, 75, -15, -128, -103, -90, 63, -16, 5, 5, -36, 39, -7, -104, 21, 122, -5, -101, 83, -53, 102, 47, -103, -4, 87, 16, 52, -121, -7, -127, 101, -89, -89, 86, -112, -21, -5, -34, 115, 17, 77, -25, 104, -21, -46, -74, -88, 5, 82, -124, 115, 12, 6, 59, 50, -73, 81, 38, -2, 28, 49, 21, -109, -6, 55, 81, 80, -109, -103, -128, 3, 50, -89, -76, -103, 55, 81, 9, 20, -41, -116, 26, 24, 34, -72, -61, -98, -106, 90, -119, -128, 94, -63, 18, -60, -121, -24, -9, 19, 48, -40, -32, -77, -35, 27, -31, 83, 51, 18, -19, -72, 22, -122, -113, 85, -59, -67, 41, -66, -28, -75, 12, -87, -49, 42, 23, 106, -122, -70, 58, 9, -121, 6, -70, 84, 46, 56, -126, 99, -112, -52, -97, -54, 126, 11, -15, 63, -36, -28, 17, 88, -21, 110, 125, 123, -49, 115, -24, 79, -6, 36, -22, 33, -33, -115, 64, -106, 42, -5, -73, -80, 43, -10, 109, -82, -75, -69, -102, -26, -10, 72, -121, 103, 25, 117, -128, -121, 39, 5, 7, -124, 21, 5, 81, -104, -17, 103, 115, -74, 65, -39, 50, -109, 106, -3, -115, 24, 111, 106, -81, 39, 108, 115, 66, 42, -88, -37, 36, 106, 18, 26, 41, 95, 17, 21, 44, -27, -13, -85, 46, -91, 40, 89, -53, 2, 95, 50, 74, 108, 99, -80, 20, -52, -28, -101, 68, -100, -15, -128, -41, -121, -18, 49, -87, 92, -57, 75, -45, 77, -72, 90, 32, 127, 59, -63, 114, -59, 46, -50, -65, 123, -94, 43, -18, 79, 56, 124, 50, 68, 21, -26, 35, 51, 63, -19, 123, 34, 39, -13, 49, 60, 108, 93, 71, -2, -30, -22, -72, -77, -75, -122, 87, -106, -66, -42, -63, 123, 93, 94, -45, 119, 69, -74, 110, 38, -123, -31, -45, 82, -38, -53, -6, -61, 54, -61, 79, 21, 33, -83, -49, 64, -125, 110, -35, -76, 46, 122, -60, -1, -60, 37, -63, 34, 102, -84, 50, -98, 114, 108, -72, -97, -115, 84, -27, 78, -63, 95, 101, -61, -100, 33, -87, 84, 69, -101, 88, 20, -65, -123, -94, 78, 18, 54, 11, 46, 41, -124, 119, -78, -42, 34, 69, -97, 60, -99, -98, -12, -57, -101, 31, -33, -73, 58, -110, 14, 97, 124, 90, -41, -90, -74, -120, 90, -35, 41, -101, 108, 55, -82, 5, -43, 47, 117, 2, 47, -1, 66, 7, 27, -71, -104, 0, 88, 117, -29, -37, 27, 32, 103, -98, 33, 93, 4, 17, 120, -43, 43, 33, -48, 103, -76, -6, 31, -118, 86, 65, 44, -15, 97, -56, 59, -112, 12, 117, 124, 111, 70, 62, 52, -73, -111, 32, 10, 40, -59, 87, -3, -67, -121, 28, -61, 24, -10, -81, -46, 119, -100, -83, -59, 69, -21, -76, 121, 15, 16, 65, -80, -46, 48, 46, -10, -7, -99, -56, -18, 67, -39, 19, 65, -90, -13, -80, -42, 3, 119, -27, 33, -37, -66, 115, 29, -37, 74, -45, -98, 84, -17, -109, -26, 39, -16, 98, -10, 101, -69, -13, -93, -75, 42, -11, 50, -41, 35, 15, 7, 102, -23, 34, 11, 32, -47, -20, -128, 51, 16, 28, 109, -65, -125, 119, -67, -102, 7, -125, 118, -110, 25, -125, -65, 127, -42, 79, 67, 64, -54, -105, -61, -30, 97, -20, -112, 103, -30, 7, -74, 94, -13, -73, -75, -125, -113, -46, -74, -26, 72, -41, -103, -72, -57, -61, -92, -15, -26, 15, 100, -91, 14, 117, 111, -19, 65, -22, 120, 20, 90, 98, 10, -25, -87, 34, -49, 67, 69, 91, 89, 116, 77, -122, -9, 8, 68, -68, -109, -78, 8, 51, -20, -53, -72, -118, 32, -57, -34, -44, -54, 46, -28, -63, -82, 116, -127, 44, 24, 111, 89, 87, -18, -39, 96, 107, 104, -37, 27, -92, 105, -43, 80, 56, -41, -60, -45, -88, 15, 112, -78, -33, 77, -27, 81, -71, 55, 30, -89, 55, 32, -42, -10, 42, 89, 126, -25, -41, 83, 53, 32, -42, 15, -32, -107, -79, -111, 63, -1, 75, -11, 115, -104, -54, 96, -39, -13, 112, -32, -34, -8, -109, 123, -105, 6, -18, 11, -39, 126, -42, -39, -22, -75, -108, -91, 62, -84, 14, -90, 112, -99, 1, -74, -92, -92, -56, -11, 94, -95, 91, -84, -71, 14, -62, -60, -43, -121, -29, 116, 52, -27, 65, 14, 9, 13, -78, 31, 16, -94, -56, 53, 97, -73, -70, 53, 80, 31, 100, 42, -59, -45, -128, -25, -87, -28, -79, 13, 68, -28, -98, 31, 50, -119, 36, 107, 55, -10, -49, -9, 3, 101, -50, -15, 6, 36, -104, 88, 82, -88, -79, -20, -20, -26, -18, 3, -83, -83, -87, 39, 9, 69, -65, -83, -48, 98, 36, -25, 53, 85, -54, 51, 67, -105, -67, 82, -9, 123, -59, -35, 9, 34, 61, -9, -46, -105, 96, 11, 119, 61, 1, 126, 70, 51, -2, 96, 80, -14, 33, -82, -52, 40, 93, -86, -114, 101, -96, -21, -29, -10, 23, -54, 46, 27, -44, -33, -47, 72, 80, -93, 67, -56, -35, 112, -66, -85, 43, 13, 111, 100, -16, -3, -91, 70, 99, -55, 117, -56, 38, 48, 50, 47, -113, 17, -19, -42, -25, 31, 22, 91, -85, 97, -90, -2, -30, -5, -103, 28, 40, 60, 6, -65, -48, -32, 55, -50, 85, 107, -35, -33, -113, -18, 57, 16, -46, 68, -49, -2, 53, 68, 116, -4, -18, 89, 25, 91, 109, 32, -71, -45, 75, 119, -23, 58, 45, -71, -17, 3, 54, -108, -56, -105, 51, -63, 105, -97, -65, 105, 12, 112, 93, 2, -117, -81, -91, 44, -19, -53, 85, -45, 44, 24, 59, -7, 12, 44, -20, -125, 15, 80, 54, -105, 49, 107, -46, -66, -124, 26, 82, -128, 102, -71, -57, 60, -112, 101, 26, -30, -88, -51, -104, 73, 12, 88, 115, -51, 68, -67, 124, -123, 103, -114, 48, 0}, params);
        kp = new EncryptionKeyPair(priv, pub);
        encrypted = ntru.encrypt(plainText, kp.pub);
        decrypted = ntru.decrypt(encrypted, kp);
        assertArrayEquals(plainText, decrypted);
    }
}