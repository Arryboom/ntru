package net.sf.ntru;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.fail;

import java.security.NoSuchAlgorithmException;

import org.junit.Test;

public class NtruEncryptTest {
    
    @Test
    public void testEncryptDecrypt() throws NoSuchAlgorithmException {
        EncryptionParameters params = EncryptionParameters.EES1499EP1;
        EncryptionKeyPair kp = NtruEncrypt.generateKeyPair(params);

        // encrypt and decrypt a polynomial
        IntegerPolynomial m = IntegerPolynomial.generateRandom(params.N);
        IntegerPolynomial r = IntegerPolynomial.generateRandomSmall(params.N, params.dr, params.dr);
        IntegerPolynomial e = NtruEncrypt.encrypt(m, r, kp.pub.h, params);
        IntegerPolynomial c = NtruEncrypt.decrypt(e, kp.priv.f, params);
        assertArrayEquals(m.coeffs, c.coeffs);
        
        // encrypt and decrypt text
        byte[] plainText = "text to encrypt".getBytes();
        byte[] encrypted = NtruEncrypt.encrypt(plainText, kp.pub, params);
        byte[] decrypted = NtruEncrypt.decrypt(encrypted, kp, params);
        assertArrayEquals(plainText, decrypted);
        
        // test an empty message
        plainText = "".getBytes();
        encrypted = NtruEncrypt.encrypt(plainText, kp.pub, params);
        decrypted = NtruEncrypt.decrypt(encrypted, kp, params);
        assertArrayEquals(plainText, decrypted);
        
        // test a max length message
        plainText = new byte[params.maxMsgLenBytes];
        System.arraycopy("secret encrypted text".getBytes(), 0, plainText, 0, 21);
        encrypted = NtruEncrypt.encrypt(plainText, kp.pub, params);
        decrypted = NtruEncrypt.decrypt(encrypted, kp, params);
        assertArrayEquals(plainText, decrypted);
        
        // test a message that is too long
        try {
            plainText = new byte[params.maxMsgLenBytes+1];
            System.arraycopy("secret encrypted text".getBytes(), 0, plainText, 0, 21);
            encrypted = NtruEncrypt.encrypt(plainText, kp.pub, params);
            decrypted = NtruEncrypt.decrypt(encrypted, kp, params);
            assertArrayEquals(plainText, decrypted);
            fail("An exception should have been thrown!");
        }
        catch (RuntimeException ex) {
        }
        
        // encrypt and decrypt text using an encoded key pair
        EncryptionPrivateKey priv = new EncryptionPrivateKey(new byte[] {116, 7, 118, 121, 6, 77, -36, 60, 65, 108, 10, -106, 12, 9, -22, -113, 122, -31, -31, 18, 120, 81, -33, 5, 122, -76, 109, -30, -101, -45, 21, 13, -11, -49, -111, 46, 91, 4, -28, -109, 121, -119, -121, -58, -113, -9, -10, -25, -53, 40, -86, -22, -50, 42, 52, 107, 119, 17, 33, 125, -26, 33, 55, 25, -77, -65, -106, 116, -67, 91, 105, -7, 42, -107, -54, 101, 12, -12, 57, -116, 45, -107, -17, 110, 35, -64, 19, -38, -122, 115, -93, 53, 69, 66, -106, 17, 20, -71, 121, 23, -21, -45, 108, 97, 23, -98, -12, -41, -31, -53, 30, -42, 15, 85, -21, -89, 118, 42, -117, -39, 69, 0, -63, 83, 48, -80, -14, -123, -4, -116, -90, -107, -89, 119, 29, -30, 69, 22, -84, 47, 117, -123, 102, -116, 35, 93, -13, 84, -9, -122, 58, 101, 93, -106, -119, -35, -75, 76, 27, -125, -22, 68, 101, 49, 103, -13, -98, 93, -56, -110, -19, -12, 74, 104, 7, 6, -11, 47, 57, 90, 75, -30, 47, 66, -58, 14, 14, 70, 11, -119, -36, -118, -55, -53, 101, -73, -77, 33, -29, 96, -86, 38, 47, 103, 19, -37, -17, -50, -82, -87, -119, 37, -54, 77, -69, -16, -48, -52, 110, -26, 111, 35, 26, -53, -10, 9, -108, -34, 102, 7, -18, -72, -26, 24, -50, -43, 92, 56, -94, 23, -36, 60, 28, -121, 27, 127, -93, -79, -45, -60, 105, -6, -88, 72, -41, 47, -51, 3, 91, 116, 75, 122, -94, -113, 28, -96, -62, -29, -74, -85, -93, 51, 58, 72, 44, 9, 18, -48, -24, 73, 122, 60, -23, 83, -110, -7, -111, -69, 106, 51, 118, -83, -18, 109, -32, 40, 22}, params);
        EncryptionPublicKey pub = new EncryptionPublicKey(new byte[] {}, params);
        kp = new EncryptionKeyPair(priv, pub);
        plainText = "secret encrypted text".getBytes();
        encrypted = NtruEncrypt.encrypt(plainText, kp.pub, params);
        decrypted = NtruEncrypt.decrypt(encrypted, kp, params);
        assertArrayEquals(plainText, decrypted);
    }
}